openapi: 3.0.0
info:
  title: OliveIt Grocery Delivery Platform API
  description: |
    Complete API documentation for the OliveIt Grocery delivery platform.
    
    This API powers a full-featured grocery delivery ecosystem with multiple user roles:
    * **Customers** can browse products, place orders, and track deliveries
    * **Vendors** can manage inventory, process orders, and view analytics
    * **Delivery Agents** can accept jobs, track earnings, and manage deliveries
    * **Admins** have complete system management capabilities
    
    All API endpoints require authentication except for registration and login.
  version: 1.0.0
  contact:
    email: support@oliveit.com

servers:
  - url: https://stack.oliveit/api
    description: Local development server

tags:
  - name: Authentication
    description: Authentication endpoints for all user types
  - name: Admin
    description: Admin panel endpoints for system management
  - name: Admin - Vendors
    description: Admin endpoints for vendor management
  - name: Admin - Delivery Agents
    description: Admin endpoints for delivery agent management
  - name: Admin - Customers
    description: Admin endpoints for customer management
  - name: Admin - Orders
    description: Admin endpoints for order management
  - name: Admin - Categories
    description: Admin endpoints for product category management
  - name: Admin - CMS
    description: Admin endpoints for content management
  - name: Customer
    description: Customer user endpoints
  - name: Customer - Profile
    description: Customer profile management
  - name: Customer - Address
    description: Customer address management
  - name: Customer - Cart
    description: Customer shopping cart operations
  - name: Customer - Orders
    description: Customer order management
  - name: Vendor
    description: Vendor user endpoints
  - name: Vendor - Products
    description: Vendor product management
  - name: Vendor - Orders
    description: Vendor order management
  - name: Vendor - Analytics
    description: Vendor analytics and reporting
  - name: Delivery
    description: Delivery agent endpoints
  - name: Delivery - Jobs
    description: Delivery job management
  - name: Delivery - Wallet
    description: Delivery agent wallet operations
  - name: Services
    description: File upload and utility services

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        role:
          type: string
          enum:
            - 'customer'
            - 'vendor'
            - 'delivery'
            - 'admin'
        customerId:
          type: string
          description: Unique customer ID (6-8 digits) for customer role
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum:
            - 'pending'
            - 'active'
            - 'rejected'
        profileImage:
          type: string
        walletBalance:
          type: number
        createdAt:
          type: string
          format: date-time
    
    Address:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        addressType:
          type: string
          enum:
            - 'HOME'
            - 'WORK'
            - 'OTHER'
        name:
          type: string
        phone:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        pincode:
          type: string
        landmark:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
              items:
                type: number
            locationName:
              type: string
        isDefault:
          type: boolean
    
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        vendor:
          type: string
        price:
          type: number
        discountPrice:
          type: number
        unit:
          type: string
        quantity:
          type: number
        images:
          type: array
          items:
            type: string
        inStock:
          type: boolean
        isActive:
          type: boolean
        avgRating:
          type: number
        totalReviews:
          type: number
    
    Order:
      type: object
      properties:
        _id:
          type: string
        orderNumber:
          type: string
        customer:
          type: string
        vendor:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: number
              price:
                type: number
              name:
                type: string
              unit:
                type: string
        deliveryAddress:
          type: object
        subtotal:
          type: number
        deliveryFee:
          type: number
        tax:
          type: number
        discount:
          type: number
        total:
          type: number
        paymentMethod:
          type: string
          enum:
            - 'cash_on_delivery'
            - 'online'
            - 'wallet'
        paymentStatus:
          type: string
          enum:
            - 'pending'
            - 'paid'
            - 'failed'
            - 'refunded'
        status:
          type: string
          enum:
            - 'pending'
            - 'accepted'
            - 'rejected'
            - 'preparing'
            - 'ready_for_pickup'
            - 'picked_up'
            - 'in_transit'
            - 'delivered'
            - 'cancelled'
        deliveryAgent:
          type: string
        createdAt:
          type: string
          format: date-time
    
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
    
    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object

paths:
  # Authentication Endpoints
  /auth/register/customer:
    post:
      summary: Register a new customer
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Customer phone number
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register/vendor:
    post:
      summary: Register a new vendor
      description: Vendors must register with a unique username which will be used for login. Email is only used for account recovery.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: Vendor's full name
                phone:
                  type: string
                  description: Vendor's phone number (10 digits)
                email:
                  type: string
                  format: email
                  description: Vendor's email address (for password reset only)
                username:
                  type: string
                  description: Unique username for login (4-20 characters, required for login)
                  example: ripunbty
                password:
                  type: string
                  format: password
                  description: Password (min 8 characters)
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                      description: [longitude, latitude]
                storeDetails:
                  type: object
                  example:
                    storeName: "Fresh Fruits Store"
                    storeAddress: "123 Main St, Mumbai"
                    storeCategory: "fruits"
                    businessEntityType: "Individual/Proprietorship"
                  properties:
                    storeName:
                      type: string
                      description: Name of the store
                    storeAddress:
                      type: string
                      description: Complete address of the store
                    storeCategory:
                      type: string
                      enum:
                        - 'fruits'
                        - 'vegetables'
                        - 'dairy'
                        - 'eggs'
                        - 'meat'
                        - 'seafood'
                        - 'bakery'
                        - 'pantry'
                        - 'snacks'
                        - 'beverages'
                        - 'frozen'
                        - 'personal'
                        - 'household'
                        - 'baby'
                        - 'health'
                        - 'ready'
                        - 'other'
                      description: Store category
                    businessEntityType:
                      type: string
                      enum:
                        - 'Individual/Proprietorship'
                        - 'Partnership'
                        - 'Limited Liability Partnership (LLP)'
                        - 'Private Limited Company'
                        - 'Public Limited Company'
                        - 'One Person Company'
                        - 'Trust'
                        - 'Society'
                        - 'Other'
                      description: Type of business entity
                    deliveryRadiusKm:
                      type: number
                      description: Maximum delivery radius in kilometers
                      default: 5
                      minimum: 1
                      maximum: 50
                      example: 5
                    pinCode:
                      type: string
                      description: PIN code/Postal code of the store location
                      example: "400001"
                legalDocuments:
                  type: object
                  properties:
                    aadhaarNumber:
                      type: string
                      description: 12-digit Aadhaar number
                    panNumber:
                      type: string
                      description: PAN card number
                    gstinNumber:
                      type: string
                      description: GSTIN number
                    fssaiNumber:
                      type: string
                      description: FSSAI license number
                bankDetails:
                  type: object
                  properties:
                    accountNumber:
                      type: string
                      description: Bank account number
                    ifscCode:
                      type: string
                      description: IFSC code of the bank
                    accountHolderName:
                      type: string
                      description: Name of the account holder
                upiDetails:
                  type: object
                  example:
                    upiId: "vendor@okicici"
                    preferredApp: "GPay"
                  properties:
                    upiId:
                      type: string
                      description: UPI ID (e.g. name@upi)
                      example: vendor@okicici
                    preferredApp:
                      type: string
                      enum:
                        - 'GPay'
                        - 'PhonePe'
                        - 'Paytm'
                        - 'Amazon Pay'
                        - 'BHIM'
                        - 'Other'
                      description: Preferred UPI payment app
                profileImage:
                  type: string
                  format: binary
                  description: Vendor's profile photo
                storePhoto:
                  type: string
                  format: binary
                  description: Photo of the store
                aadhaarPhoto:
                  type: string
                  format: binary
                  description: Photo/scan of Aadhaar card
                panPhoto:
                  type: string
                  format: binary
                  description: Photo/scan of PAN card
      responses:
        201:
          description: Vendor registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Username, email or phone already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register/delivery:
    post:
      summary: Register a new delivery agent
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
      responses:
        201:
          description: Delivery agent registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/customer:
    post:
      summary: Login as customer (send OTP)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Customer phone number
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/vendor:
    post:
      summary: Login as vendor with username and password
      description: Vendors must login using their unique username (e.g., 'ripunbty') and password. Email is only used for password reset.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Vendor username (not email)
                  example: ripunbty
                password:
                  type: string
                  format: password
                  description: Vendor password
                  example: securepassword123
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/admin:
    post:
      summary: Login as admin
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      summary: Request password reset for vendor
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Registered email address
                role:
                  type: string
                  enum:
                    - 'vendor'
                    - 'admin'
                  default: vendor
                  description: User role (defaults to vendor)
      responses:
        200:
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password:
    post:
      summary: Reset password using token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Registered email address
                resetToken:
                  type: string
                  description: Password reset token received via email
                newPassword:
                  type: string
                  format: password
                  description: New password (min 8 characters)
                role:
                  type: string
                  enum:
                    - 'vendor'
                    - 'admin'
                  default: vendor
                  description: User role (defaults to vendor)
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/delivery:
    post:
      summary: Login as delivery agent (send OTP)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Delivery agent phone number
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-otp:
    post:
      summary: Verify OTP for login/registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Phone number
                otp:
                  type: string
                  description: OTP received
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: New tokens generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        200:
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/check-username:
    post:
      summary: Check if a username is available
      description: Checks if a username is available for registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username to check (4-20 characters, letters, numbers, underscore)
                  example: "johndoe123"
      responses:
        200:
          description: Username availability check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Username is available"
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                        description: Whether the username is available
                        example: true
        400:
          description: Invalid username format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors:
    get:
      summary: Get all vendors
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - 'pending'
              - 'active'
              - 'rejected'
          description: Filter vendors by status
        - in: query
          name: search
          schema:
            type: string
          description: Search term for vendors
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of vendors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}:
    get:
      summary: Get vendor details
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      responses:
        200:
          description: Vendor details with stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}/approve:
    put:
      summary: Approve a vendor
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      responses:
        200:
          description: Vendor approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}/reject:
    put:
      summary: Reject a vendor
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for rejection
              required:
                - reason
      responses:
        200:
          description: Vendor rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Rejection reason is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}/documents:
    get:
      summary: Get vendor documents and photos
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      responses:
        200:
          description: Vendor documents with URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/find/{vendorId}:
    get:
      summary: Find vendor by formatted vendorId
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: vendorId
          required: true
          schema:
            type: string
            pattern: '^VEN\d{6,8}$'
          description: Formatted Vendor ID (e.g. VEN123456)
      responses:
        200:
          description: Vendor found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid vendor ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers:
    get:
      summary: Get all customers
      tags:
        - Admin - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for customer name, phone, email, or customerId
        - in: query
          name: customerId
          schema:
            type: string
          description: Search by exact customerId (6-8 digit unique ID)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers/find/{customerId}:
    get:
      summary: Find customer by customerId
      tags:
        - Admin - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
          description: The unique customer ID (6-8 digits)
      responses:
        200:
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers/{id}:
    get:
      summary: Get customer details
      tags:
        - Admin - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Customer MongoDB ID
      responses:
        200:
          description: Customer details with stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Profile Endpoints
  /customer/profile:
    get:
      summary: Get customer profile
      tags:
        - Customer - Profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Customer profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update customer profile
      tags:
        - Customer - Profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Address Endpoints
  /customer/addresses:
    post:
      summary: Add a new address
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                addressLine1:
                  type: string
                addressLine2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                pincode:
                  type: string
                landmark:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                addressType:
                  type: string
                  enum:
                    - 'HOME'
                    - 'WORK'
                    - 'OTHER'
                isDefault:
                  type: boolean
      responses:
        201:
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all addresses
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/addresses/{id}:
    put:
      summary: Update an address
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                addressLine1:
                  type: string
                addressLine2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                pincode:
                  type: string
                landmark:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                addressType:
                  type: string
                  enum:
                    - 'HOME'
                    - 'WORK'
                    - 'OTHER'
                isDefault:
                  type: boolean
      responses:
        200:
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an address
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        200:
          description: Address deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/addresses/{id}/default:
    put:
      summary: Set an address as default
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        200:
          description: Default address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Cart Endpoints
  /customer/cart:
    get:
      summary: Get customer's cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Cart details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add product to cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Product ID to add to cart
                quantity:
                  type: integer
                  default: 1
                  description: Quantity of product
      responses:
        200:
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or product out of stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update cart item quantity
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Product ID in cart
                quantity:
                  type: integer
                  description: New quantity (0 to remove)
      responses:
        200:
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found in cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove product from cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Product ID to remove from cart
      responses:
        200:
          description: Product removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found in cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/cart/clear:
    post:
      summary: Clear customer's cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vendorId:
                  type: string
                  description: Optional - Clear cart for specific vendor only
      responses:
        200:
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Checkout Endpoints
  /customer/checkout:
    post:
      summary: Create an order (checkout)
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - addressId
                - paymentMethod
              properties:
                addressId:
                  type: string
                  description: Delivery address ID
                paymentMethod:
                  type: string
                  enum:
                    - 'cash_on_delivery'
                    - 'online'
                    - 'wallet'
                deliveryNote:
                  type: string
                  description: Optional notes for delivery
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or cart is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Order Management Endpoints
  /customer/orders:
    get:
      summary: Get customer's orders
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - 'pending'
              - 'accepted'
              - 'rejected'
              - 'preparing'
              - 'ready_for_pickup'
              - 'picked_up'
              - 'in_transit'
              - 'delivered'
              - 'cancelled'
          description: Filter orders by status
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}:
    get:
      summary: Get order details
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}/cancel:
    put:
      summary: Cancel an order
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for cancellation
      responses:
        200:
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Order cannot be cancelled in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}/rate:
    post:
      summary: Rate and review an order
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Rating (1-5)
                review:
                  type: string
                  description: Review text
      responses:
        200:
          description: Order rated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or can only rate delivered orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}/track:
    get:
      summary: Track order in real-time
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order tracking data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Vendor Profile Endpoints
  /vendor/profile:
    get:
      summary: Get vendor profile
      tags:
        - Vendor
      security:
        - BearerAuth: []
      responses:
        200:
          description: Vendor profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update vendor profile
      tags:
        - Vendor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                storeDetails:
                  type: object
                  example:
                    storeName: "Fresh Fruits Store"
                    storeAddress: "123 Main St, Mumbai"
                    storeCategory: "fruits"
                    businessEntityType: "Individual/Proprietorship"
                  properties:
                    storeName:
                      type: string
                      description: Name of the store
                    storeAddress:
                      type: string
                      description: Complete address of the store
                    storeCategory:
                      type: string
                      enum:
                        - 'fruits'
                        - 'vegetables'
                        - 'dairy'
                        - 'eggs'
                        - 'meat'
                        - 'seafood'
                        - 'bakery'
                        - 'pantry'
                        - 'snacks'
                        - 'beverages'
                        - 'frozen'
                        - 'personal'
                        - 'household'
                        - 'baby'
                        - 'health'
                        - 'ready'
                        - 'other'
                      description: Store category
                    businessEntityType:
                      type: string
                      enum:
                        - 'Individual/Proprietorship'
                        - 'Partnership'
                        - 'Limited Liability Partnership (LLP)'
                        - 'Private Limited Company'
                        - 'Public Limited Company'
                        - 'One Person Company'
                        - 'Trust'
                        - 'Society'
                        - 'Other'
                      description: Type of business entity
                    deliveryRadiusKm:
                      type: number
                      description: Maximum delivery radius in kilometers
                      default: 5
                      minimum: 1
                      maximum: 50
                      example: 5
                    pinCode:
                      type: string
                      description: PIN code/Postal code of the store location
                      example: "400001"
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                bankDetails:
                  type: object
                  properties:
                    accountNumber:
                      type: string
                    ifscCode:
                      type: string
                    accountHolderName:
                      type: string
                upiDetails:
                  type: object
                  example:
                    upiId: "vendor@okicici"
                    preferredApp: "GPay"
                  properties:
                    upiId:
                      type: string
                      description: UPI ID (e.g. name@upi)
                      example: vendor@okicici
                    preferredApp:
                      type: string
                      enum:
                        - 'GPay'
                        - 'PhonePe'
                        - 'Paytm'
                        - 'Amazon Pay'
                        - 'BHIM'
                        - 'Other'
                      description: Preferred UPI payment app
                profileImage:
                  type: string
                  format: binary
                  description: Vendor's profile photo
                storePhoto:
                  type: string
                  format: binary
                  description: Photo of the store
                aadhaarPhoto:
                  type: string
                  format: binary
                  description: Photo/scan of Aadhaar card
                panPhoto:
                  type: string
                  format: binary
                  description: Photo/scan of PAN card
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/location:
    get:
      summary: Get customer location
      tags:
        - Customer
      security:
        - BearerAuth: []
      responses:
        200:
          description: Location retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          $ref: '#/components/responses/Unauthorized'

  /customer/nearby-stores:
    get:
      summary: Get nearby stores based on customer location
      description: |
        Find vendors/stores that are available for delivery to the customer's location.
        The API takes into account each vendor's configured delivery radius.
        Vendors outside their delivery radius will be marked as unavailable for delivery.
      tags:
        - Customer
      security:
        - BearerAuth: []
      parameters:
        - name: maxDistance
          in: query
          description: Maximum distance in kilometers to search for stores (default is 10km)
          required: false
          schema:
            type: number
            default: 10
        - name: pinCode
          in: query
          description: Filter stores by PIN code/Postal code
          required: false
          schema:
            type: string
        - name: lat
          in: query
          description: Customer latitude (optional, will use stored location if not provided)
          required: false
          schema:
            type: number
        - name: lng
          in: query
          description: Customer longitude (optional, will use stored location if not provided)
          required: false
          schema:
            type: number
      responses:
        200:
          description: Nearby stores retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      stores:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            fullName:
                              type: string
                            storeDetails:
                              type: object
                              properties:
                                storeName:
                                  type: string
                                storeCategory:
                                  type: string
                                storePhoto:
                                  type: string
                                deliveryRadiusKm:
                                  type: number
                                  example: 5
                            location:
                              type: object
                              properties:
                                coordinates:
                                  type: array
                                  items:
                                    type: number
                                locationName:
                                  type: string
                            distance:
                              type: string
                              description: Distance in kilometers from customer
                              example: "3.45"
                            isDeliveryAvailable:
                              type: boolean
                              description: Whether this store delivers to customer location
                      totalStores:
                        type: number
                        description: Total number of stores found within maxDistance
                      availableForDelivery:
                        type: number
                        description: Number of stores that deliver to the customer location
        400:
          description: Customer location not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'