openapi: 3.0.0
info:
  title: OliveIt Grocery Delivery Platform API
  description: |
    Complete API documentation for the OliveIt Grocery delivery platform.
    
    This API powers a full-featured grocery delivery ecosystem with multiple user roles:
    * **Customers** can browse products, place orders, and track deliveries
    * **Vendors** can manage inventory, process orders, and view analytics
    * **Delivery Agents** can accept jobs, track earnings, and manage deliveries
    * **Admins** have complete system management capabilities
    
    All API endpoints require authentication except for registration and login.
  version: 1.0.0
  contact:
    email: support@oliveit.com

servers:
  - url: https://stack.oliveit/api
    description: Local development server

tags:
  - name: Authentication
    description: Authentication endpoints for all user types
  - name: Admin
    description: Admin panel endpoints for system management
  - name: Admin - Vendors
    description: Admin endpoints for vendor management
  - name: Admin - Delivery Agents
    description: Admin endpoints for delivery agent management
  - name: Admin - Customers
    description: Admin endpoints for customer management
  - name: Admin - Orders
    description: Admin endpoints for order management
  - name: Admin - Categories
    description: Admin endpoints for product category management
  - name: Admin - CMS
    description: Admin endpoints for content management
  - name: Customer
    description: Customer user endpoints
  - name: Customer - Profile
    description: Customer profile management
  - name: Customer - Address
    description: Customer address management
  - name: Customer - Cart
    description: Customer shopping cart operations
  - name: Customer - Orders
    description: Customer order management
  - name: Vendor
    description: Vendor user endpoints
  - name: Vendor - Products
    description: Vendor product management
  - name: Vendor - Orders
    description: Vendor order management
  - name: Vendor - Analytics
    description: Vendor analytics and reporting
  - name: Delivery
    description: Delivery agent endpoints
  - name: Delivery - Jobs
    description: Delivery job management
  - name: Delivery - Wallet
    description: Delivery agent wallet operations
  - name: Services
    description: File upload and utility services

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        role:
          type: string
          enum: [customer, vendor, delivery, admin]
        customerId:
          type: string
          description: Unique customer ID (6-8 digits) for customer role
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [pending, active, rejected]
        profileImage:
          type: string
        walletBalance:
          type: number
        createdAt:
          type: string
          format: date-time
    
    Address:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        addressType:
          type: string
          enum: [HOME, WORK, OTHER]
        name:
          type: string
        phone:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        pincode:
          type: string
        landmark:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
              items:
                type: number
            locationName:
              type: string
        isDefault:
          type: boolean
    
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        vendor:
          type: string
        price:
          type: number
        discountPrice:
          type: number
        unit:
          type: string
        quantity:
          type: number
        images:
          type: array
          items:
            type: string
        inStock:
          type: boolean
        isActive:
          type: boolean
        avgRating:
          type: number
        totalReviews:
          type: number
    
    Order:
      type: object
      properties:
        _id:
          type: string
        orderNumber:
          type: string
        customer:
          type: string
        vendor:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: number
              price:
                type: number
              name:
                type: string
              unit:
                type: string
        deliveryAddress:
          type: object
        subtotal:
          type: number
        deliveryFee:
          type: number
        tax:
          type: number
        discount:
          type: number
        total:
          type: number
        paymentMethod:
          type: string
          enum: [cash_on_delivery, online, wallet]
        paymentStatus:
          type: string
          enum: [pending, paid, failed, refunded]
        status:
          type: string
          enum: [pending, accepted, rejected, preparing, ready_for_pickup, picked_up, in_transit, delivered, cancelled]
        deliveryAgent:
          type: string
        createdAt:
          type: string
          format: date-time
    
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
    
    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object

paths:
  # Authentication Endpoints
  /auth/register/customer:
    post:
      summary: Register a new customer
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Customer phone number
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register/vendor:
    post:
      summary: Register a new vendor
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: Vendor's full name
                phone:
                  type: string
                  description: Vendor's phone number (10 digits)
                email:
                  type: string
                  format: email
                  description: Vendor's email address
                username:
                  type: string
                  description: Unique username for login (4-20 characters)
                password:
                  type: string
                  format: password
                  description: Password (min 8 characters)
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                      description: [longitude, latitude]
                storeDetails:
                  type: object
                  properties:
                    storeName:
                      type: string
                      description: Name of the store
                    storeAddress:
                      type: string
                      description: Complete address of the store
                    storeCategory:
                      type: string
                      enum: [
                        fruits_vegetables,
                        dairy_eggs,
                        meat_seafood,
                        bakery,
                        pantry,
                        snacks,
                        beverages,
                        frozen_foods,
                        personal_care,
                        household,
                        baby_products,
                        health_wellness,
                        ready_to_eat,
                        other
                      ]
                      description: Store category
                legalDocuments:
                  type: object
                  properties:
                    aadhaarNumber:
                      type: string
                      description: 12-digit Aadhaar number
                    panNumber:
                      type: string
                      description: PAN card number
                    gstinNumber:
                      type: string
                      description: GSTIN number
                    fssaiNumber:
                      type: string
                      description: FSSAI license number
                bankDetails:
                  type: object
                  properties:
                    accountNumber:
                      type: string
                      description: Bank account number
                    ifscCode:
                      type: string
                      description: IFSC code of the bank
                    accountHolderName:
                      type: string
                      description: Name of the account holder
                profileImage:
                  type: string
                  format: binary
                  description: Vendor's profile photo
                storePhoto:
                  type: string
                  format: binary
                  description: Photo of the store
                aadhaarPhoto:
                  type: string
                  format: binary
                  description: Photo/scan of Aadhaar card
                panPhoto:
                  type: string
                  format: binary
                  description: Photo/scan of PAN card
      responses:
        201:
          description: Vendor registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Username, email or phone already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register/delivery:
    post:
      summary: Register a new delivery agent
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
      responses:
        201:
          description: Delivery agent registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/customer:
    post:
      summary: Login as customer (send OTP)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Customer phone number
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/vendor:
    post:
      summary: Login as vendor with username and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Vendor username
                password:
                  type: string
                  format: password
                  description: Vendor password
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/admin:
    post:
      summary: Login as admin
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      summary: Request password reset for vendor
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Registered email address
                role:
                  type: string
                  enum: [vendor, admin]
                  default: vendor
                  description: User role (defaults to vendor)
      responses:
        200:
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password:
    post:
      summary: Reset password using token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Registered email address
                resetToken:
                  type: string
                  description: Password reset token received via email
                newPassword:
                  type: string
                  format: password
                  description: New password (min 8 characters)
                role:
                  type: string
                  enum: [vendor, admin]
                  default: vendor
                  description: User role (defaults to vendor)
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/delivery:
    post:
      summary: Login as delivery agent (send OTP)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Delivery agent phone number
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-otp:
    post:
      summary: Verify OTP for login/registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Phone number
                otp:
                  type: string
                  description: OTP received
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: New tokens generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        200:
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors:
    get:
      summary: Get all vendors
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, active, rejected]
          description: Filter vendors by status
        - in: query
          name: search
          schema:
            type: string
          description: Search term for vendors
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of vendors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}:
    get:
      summary: Get vendor details
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      responses:
        200:
          description: Vendor details with stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}/approve:
    put:
      summary: Approve a vendor
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      responses:
        200:
          description: Vendor approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}/reject:
    put:
      summary: Reject a vendor
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for rejection
      responses:
        200:
          description: Vendor rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Rejection reason is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vendors/{id}/documents:
    get:
      summary: Get vendor documents and photos
      tags:
        - Admin - Vendors
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Vendor MongoDB ID
      responses:
        200:
          description: Vendor documents with URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers:
    get:
      summary: Get all customers
      tags:
        - Admin - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for customer name, phone, email, or customerId
        - in: query
          name: customerId
          schema:
            type: string
          description: Search by exact customerId (6-8 digit unique ID)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers/find/{customerId}:
    get:
      summary: Find customer by customerId
      tags:
        - Admin - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
          description: The unique customer ID (6-8 digits)
      responses:
        200:
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers/{id}:
    get:
      summary: Get customer details
      tags:
        - Admin - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Customer MongoDB ID
      responses:
        200:
          description: Customer details with stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Profile Endpoints
  /customer/profile:
    get:
      summary: Get customer profile
      tags:
        - Customer - Profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Customer profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update customer profile
      tags:
        - Customer - Profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Address Endpoints
  /customer/addresses:
    post:
      summary: Add a new address
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                addressLine1:
                  type: string
                addressLine2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                pincode:
                  type: string
                landmark:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                addressType:
                  type: string
                  enum: [HOME, WORK, OTHER]
                isDefault:
                  type: boolean
      responses:
        201:
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all addresses
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/addresses/{id}:
    put:
      summary: Update an address
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                addressLine1:
                  type: string
                addressLine2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                pincode:
                  type: string
                landmark:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                addressType:
                  type: string
                  enum: [HOME, WORK, OTHER]
                isDefault:
                  type: boolean
      responses:
        200:
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an address
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        200:
          description: Address deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/addresses/{id}/default:
    put:
      summary: Set an address as default
      tags:
        - Customer - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        200:
          description: Default address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Cart Endpoints
  /customer/cart:
    get:
      summary: Get customer's cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Cart details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add product to cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Product ID to add to cart
                quantity:
                  type: integer
                  default: 1
                  description: Quantity of product
      responses:
        200:
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or product out of stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update cart item quantity
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Product ID in cart
                quantity:
                  type: integer
                  description: New quantity (0 to remove)
      responses:
        200:
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found in cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove product from cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Product ID to remove from cart
      responses:
        200:
          description: Product removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found in cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/cart/clear:
    post:
      summary: Clear customer's cart
      tags:
        - Customer - Cart
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vendorId:
                  type: string
                  description: Optional - Clear cart for specific vendor only
      responses:
        200:
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Checkout Endpoints
  /customer/checkout:
    post:
      summary: Create an order (checkout)
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - addressId
                - paymentMethod
              properties:
                addressId:
                  type: string
                  description: Delivery address ID
                paymentMethod:
                  type: string
                  enum: [cash_on_delivery, online, wallet]
                deliveryNote:
                  type: string
                  description: Optional notes for delivery
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or cart is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Customer Order Management Endpoints
  /customer/orders:
    get:
      summary: Get customer's orders
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, accepted, rejected, preparing, ready_for_pickup, picked_up, in_transit, delivered, cancelled]
          description: Filter orders by status
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}:
    get:
      summary: Get order details
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}/cancel:
    put:
      summary: Cancel an order
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for cancellation
      responses:
        200:
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Order cannot be cancelled in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}/rate:
    post:
      summary: Rate and review an order
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Rating (1-5)
                review:
                  type: string
                  description: Review text
      responses:
        200:
          description: Order rated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or can only rate delivered orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customer/orders/{id}/track:
    get:
      summary: Track order in real-time
      tags:
        - Customer - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order tracking data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Vendor Profile Endpoints
  /vendor/profile:
    get:
      summary: Get vendor profile
      tags:
        - Vendor
      security:
        - BearerAuth: []
      responses:
        200:
          description: Vendor profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update vendor profile
      tags:
        - Vendor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Vendor Products Endpoints
  /vendor/products:
    get:
      summary: Get vendor's products
      tags:
        - Vendor - Products
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for product name
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: inStock
          schema:
            type: boolean
          description: Filter by stock status
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new product
      tags:
        - Vendor - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - category
                - price
                - unit
                - quantity
              properties:
                name:
                  type: string
                  description: Product name
                description:
                  type: string
                  description: Product description
                category:
                  type: string
                  description: Category ID
                price:
                  type: number
                  description: Regular price
                discountPrice:
                  type: number
                  description: Discounted price (if any)
                unit:
                  type: string
                  description: Unit of measurement (kg, g, pcs, etc.)
                quantity:
                  type: integer
                  description: Available quantity
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Product images (up to 5)
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vendor/products/{id}:
    get:
      summary: Get product details
      tags:
        - Vendor - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a product
      tags:
        - Vendor - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                description:
                  type: string
                  description: Product description
                category:
                  type: string
                  description: Category ID
                price:
                  type: number
                  description: Regular price
                discountPrice:
                  type: number
                  description: Discounted price (if any)
                unit:
                  type: string
                  description: Unit of measurement (kg, g, pcs, etc.)
                quantity:
                  type: integer
                  description: Available quantity
                isActive:
                  type: boolean
                  description: Product is active and can be ordered
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Product images (up to 5) - optional
                deleteImages:
                  type: array
                  items:
                    type: string
                  description: Image IDs to delete
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a product
      tags:
        - Vendor - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Vendor Order Endpoints
  /vendor/orders:
    get:
      summary: Get vendor's orders
      tags:
        - Vendor - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, accepted, rejected, preparing, ready_for_pickup, picked_up, in_transit, delivered, cancelled]
          description: Filter orders by status
        - in: query
          name: fromDate
          schema:
            type: string
            format: date
          description: Filter orders from date
        - in: query
          name: toDate
          schema:
            type: string
            format: date
          description: Filter orders to date
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vendor/orders/{id}:
    get:
      summary: Get order details
      tags:
        - Vendor - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vendor/orders/{id}/status:
    put:
      summary: Update order status
      tags:
        - Vendor - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [accepted, rejected, preparing, ready_for_pickup]
                  description: New status
                notes:
                  type: string
                  description: Additional notes
                rejectionReason:
                  type: string
                  description: Required if status is 'rejected'
      responses:
        200:
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid status transition or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Vendor Analytics Endpoints
  /vendor/analytics/dashboard:
    get:
      summary: Get vendor dashboard analytics
      tags:
        - Vendor - Analytics
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [today, week, month, year]
            default: month
          description: Time period for analytics
      responses:
        200:
          description: Dashboard analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vendor/analytics/sales:
    get:
      summary: Get detailed sales analytics
      tags:
        - Vendor - Analytics
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            format: date
          description: Start date for analysis
        - in: query
          name: toDate
          schema:
            type: string
            format: date
          description: End date for analysis
      responses:
        200:
          description: Sales analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vendor/analytics/products:
    get:
      summary: Get product performance analytics
      tags:
        - Vendor - Analytics
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [week, month, year]
            default: month
          description: Time period for analytics
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [sales, revenue, ratings]
            default: sales
          description: Sort criteria
      responses:
        200:
          description: Product performance data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Delivery Agent Profile Endpoints
  /delivery/profile:
    get:
      summary: Get delivery agent profile
      tags:
        - Delivery
      security:
        - BearerAuth: []
      responses:
        200:
          description: Delivery agent profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Delivery agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update delivery agent profile
      tags:
        - Delivery
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery/profile/location:
    put:
      summary: Update current location
      tags:
        - Delivery
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coordinates
              properties:
                coordinates:
                  type: array
                  items:
                    type: number
                  description: [longitude, latitude]
      responses:
        200:
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid coordinates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Delivery Jobs Endpoints
  /delivery/jobs/nearby:
    get:
      summary: Get nearby available jobs
      tags:
        - Delivery - Jobs
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: maxDistance
          schema:
            type: number
            default: 5
          description: Maximum distance in kilometers
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of jobs to return
      responses:
        200:
          description: List of nearby jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery/jobs:
    get:
      summary: Get all assigned jobs
      tags:
        - Delivery - Jobs
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [picked_up, in_transit, delivered]
          description: Filter by job status
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by specific date
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of jobs to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: List of jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery/jobs/{id}/accept:
    put:
      summary: Accept a delivery job
      tags:
        - Delivery - Jobs
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order/Job ID
      responses:
        200:
          description: Job accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Job cannot be accepted (already assigned or invalid status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery/jobs/{id}/reject:
    put:
      summary: Reject a delivery job
      tags:
        - Delivery - Jobs
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order/Job ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  description: Reason for rejecting the job
      responses:
        200:
          description: Job rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Missing required fields or invalid job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery/jobs/{id}/status:
    put:
      summary: Update job status
      tags:
        - Delivery - Jobs
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order/Job ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [picked_up, in_transit, delivered]
                  description: New job status
                notes:
                  type: string
                  description: Additional notes
                proofImageId:
                  type: string
                  description: ID of uploaded proof image (for delivered status)
      responses:
        200:
          description: Job status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Delivery Agent Wallet Endpoints
  /delivery/wallet:
    get:
      summary: Get wallet balance and transactions
      tags:
        - Delivery - Wallet
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            format: date
          description: Filter transactions from date
        - in: query
          name: toDate
          schema:
            type: string
            format: date
          description: Filter transactions to date
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of transactions to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: Wallet details and transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery/wallet/withdraw:
    post:
      summary: Request wallet withdrawal
      tags:
        - Delivery - Wallet
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - bankDetails
              properties:
                amount:
                  type: number
                  description: Amount to withdraw
                bankDetails:
                  type: object
                  properties:
                    accountName:
                      type: string
                    accountNumber:
                      type: string
                    bankName:
                      type: string
                    ifscCode:
                      type: string
      responses:
        201:
          description: Withdrawal request submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid input or insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# File Upload Services
  /services/upload/profile:
    post:
      summary: Upload profile image
      tags:
        - Services
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Profile image file (JPG/PNG/WEBP)
      responses:
        201:
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid file format or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /services/upload/kyc:
    post:
      summary: Upload KYC document
      tags:
        - Services
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - documentType
                - document
              properties:
                documentType:
                  type: string
                  enum: [ID_PROOF, ADDRESS_PROOF, BUSINESS_LICENSE, GST, OTHER]
                  description: Type of document
                document:
                  type: string
                  format: binary
                  description: Document file (JPG/PNG/PDF)
      responses:
        201:
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid document type or file format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /services/upload/delivery-proof:
    post:
      summary: Upload delivery proof
      tags:
        - Services
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - orderId
                - image
              properties:
                orderId:
                  type: string
                  description: Order ID
                image:
                  type: string
                  format: binary
                  description: Proof of delivery image
      responses:
        201:
          description: Delivery proof uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid file format or missing order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Utility Services
  /services/categories:
    get:
      summary: Get all product categories
      tags:
        - Services
      parameters:
        - in: query
          name: parent
          schema:
            type: string
          description: Filter by parent category ID (use 'null' for root categories)
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /services/search/products:
    get:
      summary: Search products
      tags:
        - Services
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: Search term
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of results to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /services/faqs:
    get:
      summary: Get FAQ content
      tags:
        - Services
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by FAQ category
      responses:
        200:
          description: List of FAQs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /services/banners:
    get:
      summary: Get banner content
      tags:
        - Services
      parameters:
        - in: query
          name: platform
          schema:
            type: string
            enum: [mobile, web]
          description: Filter by platform type
      responses:
        200:
          description: List of banners
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

# Admin Product Management
  /admin/products:
    get:
      summary: Get all products
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for product name or description
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: vendor
          schema:
            type: string
          description: Filter by vendor ID
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, pending]
          description: Filter by product status
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of results per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/products/{id}:
    get:
      summary: Get product details
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update product status
      tags:
        - Admin - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, inactive]
                  description: Product status
                notes:
                  type: string
                  description: Notes or reason for status change
      responses:
        200:
          description: Product status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Admin Category Management
  /admin/categories:
    get:
      summary: Get all categories
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: parent
          schema:
            type: string
          description: Filter by parent category ID (use 'null' for root categories)
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
      responses:
        200:
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new category
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Category name
                description:
                  type: string
                  description: Category description
                parent:
                  type: string
                  description: Parent category ID (if subcategory)
                image:
                  type: string
                  format: binary
                  description: Category image
                isActive:
                  type: boolean
                  default: true
                  description: Whether category is active
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/categories/{id}:
    get:
      summary: Get category details
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category ID
      responses:
        200:
          description: Category details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update category
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Category name
                description:
                  type: string
                  description: Category description
                parent:
                  type: string
                  description: Parent category ID (if subcategory)
                image:
                  type: string
                  format: binary
                  description: Category image
                deleteImage:
                  type: boolean
                  description: Whether to delete existing image
                isActive:
                  type: boolean
                  description: Whether category is active
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete category
      tags:
        - Admin - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category ID
      responses:
        200:
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Cannot delete category with subcategories or products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Admin Dashboard
  /admin/dashboard:
    get:
      summary: Get dashboard analytics data
      tags:
        - Admin - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum: [today, yesterday, week, month, year, custom]
            default: week
          description: Timeframe for analytics data
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for custom timeframe (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for custom timeframe (YYYY-MM-DD)
      responses:
        200:
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/revenue:
    get:
      summary: Get revenue analytics
      tags:
        - Admin - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum: [week, month, quarter, year, custom]
            default: month
          description: Timeframe for revenue data
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for custom timeframe (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for custom timeframe (YYYY-MM-DD)
        - in: query
          name: groupBy
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Group results by time period
      responses:
        200:
          description: Revenue data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Admin User Management
  /admin/users:
    get:
      summary: Get all users
      tags:
        - Admin - Users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [CUSTOMER, VENDOR, DELIVERY]
          description: Filter by user role
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, pending]
          description: Filter by user status
        - in: query
          name: search
          schema:
            type: string
          description: Search by name, email, or phone
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of results per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/users/{id}:
    get:
      summary: Get user details
      tags:
        - Admin - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user status
      tags:
        - Admin - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, inactive]
                  description: User status
                notes:
                  type: string
                  description: Notes or reason for status change
      responses:
        200:
          description: User status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Admin CMS Management
  /admin/cms/faqs:
    get:
      summary: Get all FAQs
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by FAQ category
        - in: query
          name: published
          schema:
            type: boolean
          description: Filter by published status
      responses:
        200:
          description: FAQs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new FAQ
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
                - category
              properties:
                question:
                  type: string
                  description: FAQ question
                answer:
                  type: string
                  description: FAQ answer
                category:
                  type: string
                  description: FAQ category
                published:
                  type: boolean
                  default: true
                  description: Whether FAQ is published
                order:
                  type: number
                  description: Display order
      responses:
        201:
          description: FAQ created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/cms/faqs/{id}:
    get:
      summary: Get FAQ details
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        200:
          description: FAQ details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update FAQ
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: FAQ question
                answer:
                  type: string
                  description: FAQ answer
                category:
                  type: string
                  description: FAQ category
                published:
                  type: boolean
                  description: Whether FAQ is published
                order:
                  type: number
                  description: Display order
      responses:
        200:
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete FAQ
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: FAQ ID
      responses:
        200:
          description: FAQ deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/cms/banners:
    get:
      summary: Get all banners
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [home, category, promotion]
          description: Filter by banner type
        - in: query
          name: active
          schema:
            type: boolean
          description: Filter by active status
      responses:
        200:
          description: Banners retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new banner
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - type
                - image
              properties:
                title:
                  type: string
                  description: Banner title
                description:
                  type: string
                  description: Banner description
                type:
                  type: string
                  enum: [home, category, promotion]
                  description: Banner type
                image:
                  type: string
                  format: binary
                  description: Banner image
                link:
                  type: string
                  description: Link URL when banner is clicked
                startDate:
                  type: string
                  format: date
                  description: Start date for banner display
                endDate:
                  type: string
                  format: date
                  description: End date for banner display
                isActive:
                  type: boolean
                  default: true
                  description: Whether banner is active
                order:
                  type: number
                  description: Display order
      responses:
        201:
          description: Banner created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/cms/banners/{id}:
    get:
      summary: Get banner details
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Banner ID
      responses:
        200:
          description: Banner details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update banner
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Banner ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Banner title
                description:
                  type: string
                  description: Banner description
                type:
                  type: string
                  enum: [home, category, promotion]
                  description: Banner type
                image:
                  type: string
                  format: binary
                  description: Banner image
                deleteImage:
                  type: boolean
                  description: Whether to delete existing image
                link:
                  type: string
                  description: Link URL when banner is clicked
                startDate:
                  type: string
                  format: date
                  description: Start date for banner display
                endDate:
                  type: string
                  format: date
                  description: End date for banner display
                isActive:
                  type: boolean
                  description: Whether banner is active
                order:
                  type: number
                  description: Display order
      responses:
        200:
          description: Banner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete banner
      tags:
        - Admin - CMS
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Banner ID
      responses:
        200:
          description: Banner deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 

  /admin/audit-logs:
    get:
      summary: Get admin audit logs
      tags:
        - Admin - System
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: adminId
          schema:
            type: string
          description: Filter by admin ID
        - in: query
          name: action
          schema:
            type: string
          description: Filter by action type
        - in: query
          name: entity
          schema:
            type: string
          description: Filter by entity type
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for logs
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for logs
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of results per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        200:
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/settings:
    get:
      summary: Get system settings
      tags:
        - Admin - System
      security:
        - BearerAuth: []
      responses:
        200:
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update system settings
      tags:
        - Admin - System
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deliveryFeeBase:
                  type: number
                  description: Base delivery fee
                deliveryFeePerKm:
                  type: number
                  description: Per kilometer delivery fee
                serviceFeePercentage:
                  type: number
                  description: Service fee percentage
                taxPercentage:
                  type: number
                  description: Tax percentage
                vendorCommissionPercentage:
                  type: number
                  description: Vendor commission percentage
                deliveryAgentCommissionPercentage:
                  type: number
                  description: Delivery agent commission percentage
                appVersion:
                  type: object
                  properties:
                    android:
                      type: string
                      description: Minimum required Android version
                    ios:
                      type: string
                      description: Minimum required iOS version
                maintenance:
                  type: boolean
                  description: Whether app is in maintenance mode
                maintenanceMessage:
                  type: string
                  description: Maintenance mode message
      responses:
        200:
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Settings not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify/vendor:
    post:
      summary: Verify OTP and complete vendor registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                otp:
                  type: string
      responses:
        201:
          description: Vendor registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid OTP or input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-login/vendor:
    post:
      summary: Verify OTP and login as vendor
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                otp:
                  type: string
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          description: Invalid OTP or input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 